.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.37
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Web::Light 3"
.TH Web::Light 3 "2010-01-17" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Subclass Web::Light
.PP
.Vb 3
\&    package MyApp;
\&    use base qw/ Web::Light /;
\&    1;
.Ve
.PP
Then later...
.PP
.Vb 5
\&    use Mypp;
\&    my $app = MyApp->new();
\&    $app->stash();
\&    $app->dispatch();
\&    $app->setup();
.Ve
.SH "Description"
.IX Header "Description"
Web::Light is a light-weight web framework.  It's basically just a wrapper around 
HTTP::Engine::Middleware, and does some stuff to handle plugins.  If you are 
looking for a more tested, developed, and supported web framework, consider using Catalyst.
.PP
Web::Light by default launches a stand alone web server that you can connect to with your 
browser. Since Web::Light can do whatever HTTP::Engine can, you can specify different 
interfaces like ServerSimple and FastCGI.
.SH "Usage"
.IX Header "Usage"
.ie n .Sh "new( $args )"
.el .Sh "new( \f(CW$args\fP )"
.IX Subsection "new( $args )"
Creates a Web::Light instance.
.PP
.Vb 3
\&    new(
\&       PLUGINS => [ @INC, './' ],
\&    );
.Ve
.PP
Define the location of plugins to load. This just passes a list to Module::Find's 
\&\fIsetmoduledirs()\fR method.
.PP
.Vb 3
\&    new(
\&       404 => 'MyApp::Plugin::My404',
\&    );
.Ve
.PP
Assign a custom 404 plugin to use.
.PP
.Vb 3
\&    new(
\&       AUTH => 'MyApp::Plugin::MyAuth',
\&    );
.Ve
.PP
Assign which plugin to use for authentication. See \fIdispatch()\fR on how to 
incorporate authentication.
.ie n .Sh "dispatch( $args )"
.el .Sh "dispatch( \f(CW$args\fP )"
.IX Subsection "dispatch( $args )"
Define how URLs get dispatched.
.PP
.Vb 12
\&    dispatch(
\&       root => {
\&            plugin  => 'MyApp::Plugin::Root',
\&            methods => [qw/ default hello /],
\&            session => [],
\&       },
\&       home => {
\&            plugin  => 'MyApp::Plugin::CoolHome,
\&            methods => [qw/ default /],
\&            session => [qw/ username /],
\&       },
\&    );
.Ve
.PP
The list of methods are the methods that are availabe to the web. 
The above will dispatch http://localhost/hello to the 
\&'hello' subroutine defined in MyApp::Plugin::Root
.PP
If 'session' contains a list, this forces Web::Light to check if
the variables in that list *are* set. If they aren't, the '\s-1AUTH\s0' 
plugin that was defined with \fInew()\fR will be forced.
.ie n .Sh "stash( $args )"
.el .Sh "stash( \f(CW$args\fP )"
.IX Subsection "stash( $args )"
Just a simple hash ref to pass around stuff to your plugins.
.PP
.Vb 5
\&    use Template;
\&    my $tt = Template->new;
\&    $app->stash(
\&        tt => $tt,
\&    );
.Ve
.PP
Then in your plugin..
.PP
.Vb 1
\&    package MyApp::Plugin::Cool
.Ve
.PP
.Vb 3
\&    sub default {
\&        my ($self,$app) = @_;
\&        my $tt = $app->{stash}{tt};
.Ve
.PP
.Vb 1
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Kroher, \f(CW\*(C`<mkroher at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-web\-light at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Web\-Light>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Web::Light
.Ve
.PP
You can also look for information at:
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Web\-Light>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/Web\-Light>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/Web\-Light>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/Web\-Light/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2010 Michael Kroher, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
