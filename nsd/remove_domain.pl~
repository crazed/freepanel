#!/usr/bin/perl
use strict;

# Constants, changes as necessary
use constant ZONES_DIR	=> 'zones'; 		#'/isilon/zones';
use constant NSD_CONF	=> 'nsd.conf'; 		#'/isilon/nsd.conf';
use constant XFER_FILE 	=> 'xfers'; 		#'/usr/local/etc/nsd/xfers';
use constant LOG_FILE 	=> 'domains'; 		#'/var/log/domains';
use constant DEBUG	=> 1;			# 1 for verbose

if ($#ARGV < 0) {
	print ("Usage: add_domain.pl <domain1> <domain2> ...\n");
	exit();
}

main();

sub main {
	my $domains_removed = $#ARGV+1;
	my $total_domains = $#ARGV+1;
	# loop through each domain and add as necessary
	my $domain;
	foreach my $arg (0 .. $#ARGV) {
		$domain = lc($ARGV[$arg]);
		
		if (!removeDomain($domain)) {
			--$domains_removed;
		}

	}

	print("[=]:  $domains_removed/$total_domains domains removed.\n");
	return 1;
}

sub removeDomain {
	my ($domain) = @_;
	my $start_delete;
	my $end_delete;	

	print "entering removeDomain() with $domain as argument\n";
	# open the config file and load to array
	open (NSD, '<', NSD_CONF);
	my @config = <NSD>;
	close NSD;

	# initialize end_delete to be the last index
	$end_delete = $#config;

	# loop array, look for name: "domain.com"
	for my $i (0 .. $#config) {
		if ($config[$i] =~ /name\: \"$domain\"/) {
			print "Found match at: $i\n";
			# loop backwards from match, find zone: line
			for my $j (reverse 0 .. $i) {
				print "rev: $config[$j] index: $j\n";
				if ($config[$j] =~ /zone\:/) {
					print "match found at $j\n";
					$start_delete = $j;
					last;
				}
			}
			# loop forward from match to find zone: line
			for my $k ($i .. $#config) {
				if ($config[$k] =~ /zone\:/) {
					$end_delete = $k;
					last;
				}
			}
			last;
		}
					
				
	}

	# if neither are defined, no match was found
	if (!defined($start_delete)) {
		print "debug: start is $start_delete\n";
		print "debug: end is $end_delete\n";
		print "[!]:  $domain was not found in configuration file\n";
		return 0;
	}

	# undefine the lines to delete
	for my $i ($start_delete .. $end_delete) {
		undef($config[$i]);
	}

	# rewrite the file without the lines that needed to be removed
	open (NSD, '>', NSD_CONF);
	foreach my $line (@config) {
		print NSD $line if $line;
	}
	close NSD;

	return 1;
}
